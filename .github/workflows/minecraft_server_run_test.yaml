name: üõ†Ô∏è Test Minecraft Server with Mods

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  MINECRAFT_VERSION: "1.21.4" # Minecraft-Version
  FABRIC_LOADER_VERSION: "0.16.12" # Fabric-Loader-Version
  FABRIC_LAUNCHER_VERSION: "1.0.3" # Fabric-Launcher-Version

jobs:
  test-minecraft-server:
    runs-on: ubuntu-latest

    steps:
      # üìÇ Repository auschecken
      - name: üìÇ Checkout repository
        uses: actions/checkout@v3

      # ‚òï Java 21 installieren
      - name: ‚òï Set up Java 21
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '21' # Minecraft ben√∂tigt Java 21

      # üìÇ Kopiere Mods aus dem Repository (ohne redundantes Kopieren)
      - name: üìÇ Copy Mods from Repository
        run: |
          mkdir -p mods
          find ./mods -type f -name "*.jar" -exec cp {} ./mods/ \;

      # ‚¨áÔ∏è Mods aus mods.txt herunterladen (nur f√ºr die angegebene Minecraft-Version, Loader "fabric" und server-relevante Mods)
      - name: ‚¨áÔ∏è Download Server-Relevant Mods for Minecraft ${{ env.MINECRAFT_VERSION }} (Fabric only)
        run: |
          mkdir -p mods
          echo "Downloading server-relevant mods compatible with Minecraft ${{ env.MINECRAFT_VERSION }} and Fabric..."
          while IFS= read -r slug; do
            if [ ! -z "$slug" ]; then
              echo "Downloading mod: $slug for Minecraft ${{ env.MINECRAFT_VERSION }} (Fabric)"
              mod_url=$(curl -s "https://api.modrinth.com/v2/project/$slug/version" | jq -r '.[] | select(.game_versions[] | contains("${{ env.MINECRAFT_VERSION }}")) | select(.loaders[] | contains("fabric")) | select(.environments.server == true) | .files[0].url')
              
              if [ ! -z "$mod_url" ]; then
                curl -O -J -o mods/$slug.jar "$mod_url"
                if [ -f "mods/$slug.jar" ]; then
                  echo "‚úÖ Mod $slug downloaded successfully!"
                else
                  echo "‚ùå Failed to download mod $slug."
                  exit 1
                fi
              else
                echo "‚ö†Ô∏è No compatible server-side version found for mod: $slug"
              fi
            fi
          done < mods.txt

      # ‚¨áÔ∏è Download Fabric Server Launcher
      - name: ‚¨áÔ∏è Download Fabric Server Launcher
        run: |
          curl -OJ https://meta.fabricmc.net/v2/versions/loader/${{ env.MINECRAFT_VERSION }}/${{ env.FABRIC_LOADER_VERSION }}/${{ env.FABRIC_LAUNCHER_VERSION }}/server/jar
          mv fabric-server-mc.${{ env.MINECRAFT_VERSION }}-loader.${{ env.FABRIC_LOADER_VERSION }}-launcher.${{ env.FABRIC_LAUNCHER_VERSION }}.jar server.jar

      # ‚úÖ Accept Minecraft EULA
      - name: ‚úÖ Accept Minecraft EULA
        run: echo "eula=true" > eula.txt

      # üöÄ Server starten
      - name: üöÄ Start Minecraft Server
        run: |
          java -Xmx2G -jar server.jar nogui &
          sleep 30 # Warte, bis der Server vollst√§ndig gestartet ist

      # ‚úÖ √úberpr√ºfen, ob der Server l√§uft
      - name: ‚úÖ Check Server Status
        run: |
          if pgrep -f "server.jar" > /dev/null; then
            echo "‚úÖ Server is running successfully!"
          else
            echo "‚ùå Server failed to start."
            exit 1
          fi